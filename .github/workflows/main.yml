name: Deploy Project to App Engine

on:
  push:
    branches:
      - main

  # run the workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test:
    name: Test and Sonarqube
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Test and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew clean test jacocoTestReport sonarqube --info

  deploy:
    name: Deploying to Google Cloud
    runs-on: ubuntu-latest
    
    env:
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Add database variables to application properties
        run: echo 'spring.datasource.password=${{ secrets.DB_PASSWORD }}' >> src/main/resources/application-prod.properties

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_CREDENTIALS }}

      - name: Set Google Cloud project
        run: gcloud config set project automatic-bond-454109-v8

      - name: Deploy to App Engine
        id: deploy
        uses: google-github-actions/deploy-appengine@v0.2.0
        with:
          deliverables: app.yaml
          version: ${{ github.run_id }}
          credentials: ${{ secrets.GCP_SERVICE_CREDENTIALS }}

      - name: Delete Old Versions
        run: |
          # Get all versions with no traffic split
          VERSIONS=$(gcloud app versions list --filter="traffic_split=0.00"   --format="value(id)")
          
          if [ -z "$VERSIONS" ]; then
            echo "No old versions to delete."
          else
            echo "Deleting the following old versions:"
            echo "$VERSIONS"
            echo "$VERSIONS" | xargs gcloud app versions delete -q
          fi

      - name: Test
        run: curl "${{ steps.deploy.outputs.url }}"

